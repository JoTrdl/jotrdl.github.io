{"version":3,"sources":["../node_modules/stats.js/build/stats.min.js","0","../src/shadu.js","mandelbrot/index.js"],"names":["module","exports","root","ShadU","DEVICE_PIXEL_RATIO","devicePixelRatio","get3DContext","canvas","options","names","context","i","length","getContext","e","createProgram","gl","vertex","fragment","vs","fs","program","compileShader","VERTEX_SHADER","FRAGMENT_SHADER","deleteProgram","attachShader","deleteShader","linkProgram","validateProgram","getProgramParameter","LINK_STATUS","info","getProgramInfoLog","Error","code","type","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","lines","getShaderSource","split","src","getShaderInfoLog","createTexture","width","height","texture","format","RGBA","level","UNSIGNED_BYTE","border","min","minFilter","NEAREST","mag","magFilter","wrapS","CLAMP_TO_EDGE","wrapT","data","flipY","preAlpha","FLOAT","extensions","getSupportedExtensions","indexOf","getExtension","LINEAR","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","ArrayBuffer","texImage2D","DEFAULT_VERTEX_SHADER","join","HEADER_FRAGMENT_SHADER","BODY_FRAGMENT_SHADER","DEFAULT_FRAGMENT_SHADER","PAINT_VERTICES","Float32Array","PAINT_VERTICES_LENGTH","applyUniform","location","value","uLocation","getUniformLocation","values","call","textures","t","isShadUTexture","output","activeTexture","TEXTURE0","args","concat","apply","applyAttribute","size","buffer","locationId","getAttribLocation","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","bindAttribLocation","vertexAttribPointer","enableVertexAttribArray","Texture","WebGLRenderingContext","offsetWidth","offsetHeight","viewportWidth","viewportHeight","uResolution","reset","console","log","prototype","keepOutput","shaders","attributes","uniforms","frameBuffer","createFramebuffer","frame","time","quadBuffer","createBuffer","paintShader","quadVertices","geometryBuffer","vertices","arrays","TRIANGLE_STRIP","geometry","vertexFragment","userUniforms","userAttributes","a","push","image","sampler","paint","useProgram","bindFramebuffer","FRAMEBUFFER","uniform1i","viewport","drawArrays","resize","render","index","input","textureUnit","Date","now","callback","out","framebufferTexture2D","COLOR_ATTACHMENT0","uniform1f","uniform3f","u","iterate","count","uniform","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","write","xoffset","yoffset","UNSIGNED_SHORT","Uint8Array","UNSIGNED_INT","Int32Array","texSubImage2D","factory","define","amd","WIDTH","window","innerWidth","HEIGHT","innerHeight","document","getElementById","stats","Stats","search","match","body","appendChild","domElement","premultipliedAlpha","alpha","depth","stencil","disable","DEPTH_TEST","CULL_FACE","DITHER","rtt","addEventListener","requestAnimationFrame","update"],"mappings":"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","file":"mandelbrot.088025aa.map","sourceRoot":"../showcases","sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n",null,"/*! shadu v1.0.0 | (c) 2018 Johann Troendle | https://github.com/JoTrdl/shadu.git */\n/**\n * ShadU module.\n * @namespace ShadU\n */\n;(function (root) {\n  'use strict'\n\n  var ShadU = {}\n\n  var DEVICE_PIXEL_RATIO = (typeof devicePixelRatio !== 'undefined' && devicePixelRatio) || 1\n\n  /**\n   * @function get3DContext\n   * @memberof ShadU\n   * @static\n   *\n   * Get a 3d context from the canvas\n   * Pass options to the canvas.getContext() function.\n   *\n   * @param  {HTMLCanvasElement}      canvas  The canvas element\n   * @param  {Object}                 options Options to pass to getContext()\n   * @return {WebGLRenderingContext}  The WebGL context or null if not supported\n   */\n  ShadU.get3DContext = function (canvas, options) {\n    var names = ['webgl', 'experimental-webgl']\n    var context = null\n\n    for (var i = 0; i < names.length; i++) {\n      try {\n        context = canvas.getContext(names[i], options)\n      } catch (e) {}\n      if (context) {\n        break\n      }\n    }\n    return context\n  }\n\n  /**\n   * @function createProgram\n   * @memberof ShadU\n   * @static\n   *\n   * Create a GL program.\n   *\n   * @param  {WebGLRenderingContext} gl        WebGL context\n   * @param  {String}                vertex    Vertex code\n   * @param  {String}                fragment  Fragment code\n   * @return {Program}                         The program compiled & linked.\n   */\n  ShadU.createProgram = function (gl, vertex, fragment) {\n    var vs\n    var fs\n    var program = gl.createProgram()\n\n    try {\n      vs = this.compileShader(gl, vertex, gl.VERTEX_SHADER)\n      fs = this.compileShader(gl, fragment, gl.FRAGMENT_SHADER)\n    } catch (e) {\n      gl.deleteProgram(program)\n      throw e\n    }\n\n    gl.attachShader(program, vs)\n    gl.deleteShader(vs)\n    gl.attachShader(program, fs)\n    gl.deleteShader(fs)\n    gl.linkProgram(program)\n    gl.validateProgram(program)\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      var info = gl.getProgramInfoLog(program)\n      throw new Error('Could not compile WebGL program:\\n' + info)\n    }\n\n    return program\n  }\n\n  /**\n   * @function compileShader\n   * @memberof ShadU\n   * @static\n   *\n   * Compile the shader.\n   *\n   * @param  {WebGLRenderingContext} gl   WebGL context\n   * @param  {String}                code Shader code\n   * @param  {Int}                   type Shader type (gl.VERTEX_SHADER | gl.FRAGMENT_SHADER)\n   * @return {Shader}                Compiled shader\n   */\n  ShadU.compileShader = function (gl, code, type) {\n    var shader = gl.createShader(type)\n\n    gl.shaderSource(shader, code)\n    gl.compileShader(shader)\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      var lines = gl.getShaderSource(shader).split('\\n')\n      var src = ''\n      for (var i = 0; i < lines.length; i++) {\n        src += (i + 1) + '.' + lines[i] + '\\n'\n      }\n      throw new Error('GLSL Compilation Error:\\n' + gl.getShaderInfoLog(shader) + '\\n' + src)\n    }\n\n    return shader\n  }\n\n  /**\n   * @function createTexture\n   * @memberof ShadU\n   * @static\n   *\n   * Create an empty texture.\n   *\n   * @param  {WebGLRenderingContext} gl      WebGL context\n   * @param  {Number}                width   Width\n   * @param  {Number}                height  Height\n   * @param  {Object}                options Extra options\n   * @return {Texture}                       The texture\n   */\n  ShadU.createTexture = function (gl, width, height, options) {\n    var texture = gl.createTexture()\n\n    // save infos in texture for future bindings\n    var format = texture.format = (options && options.format) || gl.RGBA\n    var level = texture.level = (options && options.level) || 0\n    var type = texture.type = (options && options.type) || gl.UNSIGNED_BYTE\n    var border = texture.border = (options && options.border) || 0\n    var min = (options && options.minFilter) || gl.NEAREST\n    var mag = (options && options.magFilter) || gl.NEAREST\n    var wrapS = (options && options.wrapS) || gl.CLAMP_TO_EDGE\n    var wrapT = (options && options.wrapT) || gl.CLAMP_TO_EDGE\n    var data = (options && options.data) || null\n    var flipY = (options && options.flipY) || false\n    var preAlpha = (options && options.preAlpha) || false\n    // var colorConvsersion = (options && options.colorConvsersion) || gl.BROWSER_DEFAULT_WEBGL\n\n    if (type === gl.FLOAT) {\n      var extensions = gl.getSupportedExtensions()\n      if (extensions.indexOf('OES_texture_float') < 0) {\n        throw new Error('Type gl.FLOAT is not supported.')\n      }\n      // else activate the float extension\n      gl.getExtension('OES_texture_float')\n\n      if (min === gl.LINEAR || mag === gl.LINEAR) {\n        if (extensions.indexOf('OES_texture_float_linear') < 0) {\n          throw new Error('Type gl.FLOAT with filter gl.LINEAR is not supported.')\n        }\n        // else activate the float_linear extension\n        gl.getExtension('OES_texture_float_linear')\n      }\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, texture)\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mag)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, min)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT)\n\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY)\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, preAlpha)\n\n    if (!data || data instanceof ArrayBuffer) {\n      gl.texImage2D(gl.TEXTURE_2D, level, format, width, height, border, format, type, data)\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, level, format, format, type, data)\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null)\n\n    return texture\n  }\n\n  /**\n   * The default vertex.\n   * @type {String}\n   */\n  var DEFAULT_VERTEX_SHADER = [\n    'attribute vec2 position;',\n    'varying vec2 uv;',\n\n    'void main() {',\n    '  uv = position;',\n    '  vec2 pos = position * 2.0 - 1.0;',\n    '  gl_Position = vec4(pos.x, pos.y, 0, 1);',\n    '}'\n  ].join('\\n')\n\n  var HEADER_FRAGMENT_SHADER = [\n    '#ifdef GL_FRAGMENT_PRECISION_HIGH',\n    '  precision highp float;',\n    '#else',\n    '  precision mediump float;',\n    '#endif',\n\n    'uniform sampler2D sampler;',\n    'uniform vec3 resolution;',\n    'uniform int frame;',\n    'uniform float time;',\n    'varying vec2 uv;'\n  ].join('\\n')\n\n  var BODY_FRAGMENT_SHADER = [\n    'void main() {',\n    '  gl_FragColor = texture2D(sampler, uv);',\n    '}'\n  ].join('\\n')\n\n  /**\n   * The default fragment to paint in buffer.\n   * @type {String}\n   */\n  var DEFAULT_FRAGMENT_SHADER = [\n    HEADER_FRAGMENT_SHADER,\n    BODY_FRAGMENT_SHADER\n  ].join('\\n')\n\n  /**\n   * 2 triangles (plane) for painting the result\n   * @type {Float32Array}\n   */\n  var PAINT_VERTICES = new Float32Array([\n    -1.0, -1.0,\n    1.0, -1.0,\n    -1.0, 1.0,\n    1.0, -1.0,\n    1.0, 1.0,\n    -1.0, 1.0\n  ])\n\n  /**\n   * Pre-compute VERTICES length\n   * @type {Number}\n   */\n  var PAINT_VERTICES_LENGTH = PAINT_VERTICES.length / 2\n\n  /**\n   * Apply uniform.\n   *\n   * @param  {Object} gl       GL context\n   * @param  {Object} shader   Shader program\n   * @param  {Object} type     GL uniform type or 't' for texture\n   * @param  {String} location Uniform name\n   * @param  {Object} value    Value to set\n   * @param  {Object} texture  Web GL texture if type is 't'\n   */\n  var applyUniform = function (gl, shader, type, location, value, texture) {\n    var uLocation = gl.getUniformLocation(shader, location)\n\n    if (value === null || !uLocation) {\n      return\n    }\n\n    var values = (value.length) ? value : [value]\n\n    if (!texture) {\n      var args = [uLocation].concat(values)\n      type.apply(gl, args)\n    } else { // texture to bind\n      type.call(gl, uLocation, value)\n\n      var textures = (texture.length) ? texture : [texture]\n      var t\n      for (var i = 0; i < textures.length; i++) {\n        t = (textures[i].isShadUTexture && textures[i].output) || textures[i]\n        gl.activeTexture(gl.TEXTURE0 + values[i])\n        gl.bindTexture(gl.TEXTURE_2D, t)\n      }\n    }\n  }\n\n  /**\n   * Apply attribute.\n   *\n   * @param  {Object} gl       GL context\n   * @param  {Object} shader   Shader program\n   * @param  {String} location Location name\n   */\n  var applyAttribute = function (gl, shader, location, size, buffer, data) {\n    var locationId = gl.getAttribLocation(shader, location)\n\n    if (locationId < 0) {\n      return\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)\n\n    gl.bindAttribLocation(shader, locationId, 'position')\n    gl.vertexAttribPointer(locationId, size, gl.FLOAT, false, 0, 0)\n    gl.enableVertexAttribArray(locationId)\n  }\n\n  /**\n   * @class Texture\n   * @constructor\n   * @memberof ShadU\n   * @static\n   *\n   * Texture constructor\n   * @param {WebGLRenderingContext} gl      WebGL context for rendering\n   * @param {Object}                options Object of options.\n   */\n  var Texture = ShadU.Texture = function (gl, options) {\n    this.isShadUTexture = true\n    this.options = options || {}\n    this.gl = gl\n\n    if (!(gl && gl instanceof WebGLRenderingContext)) {\n      console.log('Error, paramater [gl] must be a WebGL context')\n      return\n    }\n\n    // Init texture size\n    this.width = (this.options.width || gl.canvas.offsetWidth) * DEVICE_PIXEL_RATIO\n    this.height = (this.options.height || gl.canvas.offsetHeight) * DEVICE_PIXEL_RATIO\n\n    // Init viewport size\n    this.viewportWidth = this.options.viewportWidth || gl.canvas.width\n    this.viewportHeight = this.options.viewportHeight || gl.canvas.height\n\n    this.uResolution = [this.width / this.height, 1.0, DEVICE_PIXEL_RATIO]\n\n    this.reset()\n  }\n\n  /**\n   * Reset the Texture\n   *\n   * @return {TextureInstance}  this\n   */\n  Texture.prototype.reset = function (keepOutput) {\n    var gl = this.gl\n    this.shaders = [] // Shaders list\n    this.attributes = [] // Atrributes list\n    this.uniforms = [] // Uniforms list\n\n    // Framebuffer & Ping-Pong textures\n    this.frameBuffer = gl.createFramebuffer()\n    this.textures = [\n      ShadU.createTexture(gl, this.width, this.height, this.options.texture),\n      ShadU.createTexture(gl, this.width, this.height, this.options.texture)\n    ]\n\n    this.frame = 0\n    this.time = 0\n    this.output = (keepOutput !== true && this.textures[0]) || this.output\n\n    // Paint buffer & shader\n    this.quadBuffer = gl.createBuffer()\n    this.paintShader = ShadU.createProgram(gl, DEFAULT_VERTEX_SHADER, DEFAULT_FRAGMENT_SHADER)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.quadBuffer)\n    this.quadVertices = new Float32Array(PAINT_VERTICES)\n\n    this.geometryBuffer = this.quadBuffer\n    this.vertices = this.quadVertices\n    this.arrays = [gl.TRIANGLE_STRIP, 0, PAINT_VERTICES_LENGTH] // default to quad\n\n    // Process custom geometry\n    if (this.options.geometry) {\n      this.vertices = this.options.geometry.vertices\n      this.arrays = this.options.geometry.arrays\n    }\n\n    return this\n  }\n\n  /**\n   * Add a new fragment in the Texture chain with DEFAULT_VERTEX_SHADER vertex.\n   *\n   * @param  {String} fragmentShader  The fragment shader\n   * @return {TextureInstance}        this\n   */\n  Texture.prototype.fragment = function (fragment, uniforms) {\n    return this.vertexFragment(DEFAULT_VERTEX_SHADER, fragment, uniforms)\n  }\n\n  /**\n   * Add a new vertex/fragment in the Texture chain.\n   *\n   * @param  {String} vertexShader   The vertext shader\n   * @param  {String} fragmentShader The fragment shader\n   * @return {TextureInstance}       this\n   */\n  Texture.prototype.vertexFragment = function (vertex, fragment, userUniforms, userAttributes) {\n    var shader = ShadU.createProgram(this.gl, vertex, HEADER_FRAGMENT_SHADER + '\\n' + fragment)\n\n    this.shaders.push(shader)\n    this.uniforms.push(userUniforms || {})\n\n    // Init buffers before pushing on stack\n    for (var a in userAttributes) {\n      userAttributes[a].buffer = this.gl.createBuffer()\n    }\n\n    this.attributes.push(userAttributes || {})\n\n    return this\n  }\n\n  /**\n   * Render an image on the chain.\n   *\n   * @param  {Boolean} flipY    Flip the Y axis, default to true\n   * @return {TextureInstance}  this\n   */\n  Texture.prototype.image = function (image, flipY) {\n    var texture = ShadU.createTexture(this.gl, this.width, this.height, {\n      flipY: flipY || true,\n      data: image\n    })\n    var uniforms = {\n      sampler: { type: 't', value: texture }\n    }\n\n    return this.vertexFragment(DEFAULT_VERTEX_SHADER, BODY_FRAGMENT_SHADER, uniforms)\n  }\n\n  /**\n   * Paint the Texture on the screen buffer.\n   * @return {TextureInstance} this\n   */\n  Texture.prototype.paint = function () {\n    if (!this.output) {\n      console.log('Error: no output to paint. Call render() at least once.')\n      return this\n    }\n\n    var gl = this.gl\n\n    gl.useProgram(this.paintShader)\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\n    applyAttribute(gl, this.paintShader, 'position', 2, this.quadBuffer, this.quadVertices)\n    applyUniform(gl, this.paintShader, gl.uniform1i, 'sampler', 0, this.output)\n\n    gl.viewport(0, 0, this.viewportWidth, this.viewportHeight)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, PAINT_VERTICES_LENGTH)\n\n    return this\n  }\n\n  /**\n   * Resize the Texture\n   *\n   * @param  {Number} width          New texture width, default canvas.width\n   * @param  {Number} height         New texture height, default canvas.height\n   * @param  {Number} viewportWidth  New viewport width, default canvas.width\n   * @param  {Number} viewportHeight News viewport height, default canvas.height\n   * @return {TextureInstance}       this\n   */\n  Texture.prototype.resize = function (width, height, viewportWidth, viewportHeight) {\n    var gl = this.gl\n\n    this.width = width || (gl.canvas.offsetWidth * DEVICE_PIXEL_RATIO)\n    this.height = height || (gl.canvas.offsetHeight * DEVICE_PIXEL_RATIO)\n    this.viewportWidth = viewportWidth || gl.canvas.width\n    this.viewportHeight = viewportHeight || gl.canvas.height\n\n    this.uResolution = [this.width / this.height, 1.0, DEVICE_PIXEL_RATIO]\n\n    for (var i = 0; i < this.textures.length; i++) {\n      var t = this.textures[i]\n      gl.bindTexture(gl.TEXTURE_2D, t)\n      gl.texImage2D(gl.TEXTURE_2D, t.level, t.format, this.width, this.height, t.border, t.format, t.type, null)\n    }\n\n    return this\n  }\n\n  /**\n   * Render the texture.\n   *\n   * @return {TextureInstance}  this\n   */\n  Texture.prototype.render = function () {\n    var gl = this.gl\n    var i\n    var index\n    var input\n    var textureUnit\n\n    this.time = Date.now() * 0.001\n\n    for (i = 0; i < this.shaders.length; i++) {\n      textureUnit = 0\n\n      // Ping pong\n      input = this.output\n      index = (++this.frame) % 2\n      this.output = this.textures[index]\n\n      if (this.shaders[i].callback) {\n        var out = this.shaders[i].callback(input)\n        if (out) {\n          this.output = out\n          continue\n        }\n      }\n\n      // Bind program & framebuffer\n      gl.useProgram(this.shaders[i])\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer)\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.output, 0)\n\n      // apply default attribute/uniforms\n      applyAttribute(gl, this.shaders[i], 'position', 2, this.geometryBuffer, this.vertices)\n      applyUniform(gl, this.shaders[i], gl.uniform1i, 'sampler', textureUnit++, input)\n      applyUniform(gl, this.shaders[i], gl.uniform1i, 'frame', this.frame)\n      applyUniform(gl, this.shaders[i], gl.uniform1f, 'time', this.time)\n      applyUniform(gl, this.shaders[i], gl.uniform3f, 'resolution', this.uResolution)\n\n      // apply user attributes\n      for (var a in this.attributes) {\n        applyAttribute(gl, this.shaders[i], a, this.attributes[a].size, this.attributes[a].buffer, this.attributes[a].data)\n      }\n\n      // Apply user uniforns, take care of the custom 't' type for texture\n      for (var u in this.uniforms[i]) {\n        var type = gl['uniform' + this.uniforms[i][u].type]\n        var value = this.uniforms[i][u].value\n        var texture = null\n\n        if (this.uniforms[i][u].type === 't') {\n          type = gl.uniform1i\n          value = textureUnit++\n          texture = this.uniforms[i][u].value\n        }\n\n        applyUniform(gl, this.shaders[i], type, u, value, texture)\n      }\n\n      // Draw the shaders\n      gl.viewport(0, 0, this.width, this.height)\n      gl.drawArrays.apply(gl, this.arrays)\n    }\n\n    return this\n  }\n\n  /**\n   * Iterate the last program on the stack.\n   *\n   * @param  {Number} count Iterate count\n   * @return {TextureInstance} this\n   */\n  Texture.prototype.iterate = function (count) {\n    var shader = this.shaders[this.shaders.length - 1]\n    var uniform = this.uniforms[this.uniforms.length - 1]\n\n    for (var i = 0; i < count; i++) {\n      this.shaders.push(shader)\n      this.uniforms.push(uniform)\n    }\n\n    return this\n  }\n\n  /**\n   * Calbback hook\n   *\n   * @param  {Function} callback Iteration function\n   * @return {TextureInstance} this\n   */\n  Texture.prototype.callback = function (callback) {\n    this.fragment(BODY_FRAGMENT_SHADER)\n\n    var shader = this.shaders[this.shaders.length - 1]\n    shader.callback = callback\n\n    return this\n  }\n\n  /**\n   * Clear the framebuffer.\n   *\n   * @return {TextureInstance}  this\n   */\n  Texture.prototype.clear = function () {\n    if (!this.frame) { // Nothing to clear\n      return this\n    }\n\n    var gl = this.gl\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT)\n\n    return this\n  }\n\n  /**\n   * Write in the texture.\n   * This write in gl.RGBA format\n   *\n   * @return {TextureInstance}  this\n   */\n  Texture.prototype.write = function (xoffset, yoffset, width, height, type, data) {\n    var gl = this.gl\n\n    var buffer\n    switch (type) {\n      case gl.UNSIGNED_BYTE:\n      case gl.UNSIGNED_SHORT:\n        buffer = new Uint8Array(data)\n        break\n      case gl.FLOAT:\n        buffer = new Float32Array(data)\n        break\n      case gl.UNSIGNED_INT:\n      default:\n        buffer = new Int32Array(data)\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, this.output)\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, xoffset, yoffset, width, height, gl.RGBA, type, buffer)\n  };\n\n  // Export\n  (function (root, factory) {\n    /* eslint-disable no-undef */\n    if (typeof define === 'function' && define.amd) {\n      define([], factory)\n    } else if (typeof exports === 'object') {\n      module.exports = factory()\n    } else {\n      root.ShadU = factory()\n    }\n  }(root, function () {\n    return ShadU\n  }))\n})(this)\n","\nimport Stats from 'stats.js'\nimport fragment from './fragment'\n\nimport ShadU from 'shadu'\n\nlet WIDTH = window.innerWidth\nlet HEIGHT = window.innerHeight\n\nconst canvas = document.getElementById('canvas')\ncanvas.width = WIDTH\ncanvas.height = HEIGHT\n\nconst stats = new Stats()\nif (!document.location.search.match(/nostats/)) {\n  document.body.appendChild(stats.domElement)\n}\n\nconst gl = ShadU.get3DContext(canvas, {\n  premultipliedAlpha: false,\n  alpha: false,\n  depth: false,\n  stencil: false\n})\ngl.disable(gl.DEPTH_TEST)\ngl.disable(gl.CULL_FACE)\ngl.disable(gl.DITHER)\n\nconst rtt = new ShadU.Texture(gl, {\n  width: WIDTH,\n  height: HEIGHT\n}).fragment(fragment)\n\nwindow.addEventListener('resize', () => {\n  WIDTH = canvas.width = window.innerWidth\n  HEIGHT = canvas.height = window.innerHeight\n  rtt.resize(WIDTH, HEIGHT)\n})\n\nconst render = () => {\n  requestAnimationFrame(render)\n  stats.update()\n\n  rtt.render().paint()\n}\nrender()\n"]}